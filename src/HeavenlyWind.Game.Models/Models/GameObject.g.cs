//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Sakuno.KanColle.Amatsukaze.Game.Models.MasterData;

namespace Sakuno.KanColle.Amatsukaze.Game.Models
{
    public partial class Equipment : Calculated<IRawEquipment>
    {
        public Equipment(int id, ITableProvider owner) : base(id, owner)
        {
            equipmentInfoTable = owner.GetTable<EquipmentInfo>();
            CreateDummy();
        }

        private readonly ITable<EquipmentInfo> equipmentInfoTable;

        private EquipmentInfo _info;
        public EquipmentInfo Info
        {
            get => _info;
            private set => Set(ref _info, value);
        }

        private bool _isLocked;
        public bool IsLocked
        {
            get => _isLocked;
            private set => Set(ref _isLocked, value);
        }

        private int _improvementLevel;
        public int ImprovementLevel
        {
            get => _improvementLevel;
            private set => Set(ref _improvementLevel, value);
        }

        private int _airProficiency;
        public int AirProficiency
        {
            get => _airProficiency;
            private set => Set(ref _airProficiency, value);
        }

        public override void Update(IRawEquipment raw)
        {
            IsLocked = raw.IsLocked;
            ImprovementLevel = raw.ImprovementLevel;
            AirProficiency = raw.AirProficiency;
            UpdateCore(raw);
        }
        partial void UpdateCore(IRawEquipment raw);
        partial void CreateDummy();
    }
    public partial class BuildingDock : Calculated<IRawBuildingDock>
    {
        public BuildingDock(int id, ITableProvider owner) : base(id, owner)
        {
            shipInfoTable = owner.GetTable<ShipInfo>();
            CreateDummy();
        }

        private readonly ITable<ShipInfo> shipInfoTable;

        private DateTimeOffset _completionTime;
        public DateTimeOffset CompletionTime
        {
            get => _completionTime;
            private set => Set(ref _completionTime, value);
        }

        private BuildingDockState _state;
        public BuildingDockState State
        {
            get => _state;
            private set => Set(ref _state, value);
        }

        private Materials _consumption;
        public Materials Consumption
        {
            get => _consumption;
            private set => Set(ref _consumption, value);
        }

        private ShipInfo _builtShip;
        public ShipInfo BuiltShip
        {
            get => _builtShip;
            private set => Set(ref _builtShip, value);
        }

        private bool _isLSC;
        public bool IsLSC
        {
            get => _isLSC;
            private set => Set(ref _isLSC, value);
        }

        public override void Update(IRawBuildingDock raw)
        {
            CompletionTime = raw.CompletionTime;
            State = raw.State;
            Consumption = raw.Consumption;
            IsLSC = raw.IsLSC;
            UpdateCore(raw);
        }
        partial void UpdateCore(IRawBuildingDock raw);
        partial void CreateDummy();
    }
    public partial class UseItemCount : Calculated<IRawUseItemCount>
    {
        public UseItemCount(int id, ITableProvider owner) : base(id, owner)
        {
            useItemInfoTable = owner.GetTable<UseItemInfo>();
            CreateDummy();
        }

        private readonly ITable<UseItemInfo> useItemInfoTable;

        private UseItemInfo _item;
        public UseItemInfo Item
        {
            get => _item;
            private set => Set(ref _item, value);
        }

        private int _count;
        public int Count
        {
            get => _count;
            private set => Set(ref _count, value);
        }

        public override void Update(IRawUseItemCount raw)
        {
            Count = raw.Count;
            UpdateCore(raw);
        }
        partial void UpdateCore(IRawUseItemCount raw);
        partial void CreateDummy();
    }
}
