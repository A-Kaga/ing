<Project>
  <ItemGroup>
    <UpToDateCheckInput Include="@(Scaffold)" />
  </ItemGroup>

  <UsingTask TaskName="CalculatedScaffold" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Inputs ParameterType="System.String[]" Required="True" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
foreach (var infile in Inputs)
{
    string outfile = Path.ChangeExtension(infile, ".g.cs");
    Log.LogMessage("{0} -> {1}", infile, outfile);
    using (var input = File.OpenText(infile))
    using (var output = File.CreateText(outfile))
    {
        output.WriteLine(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------");
        output.Write("using System;");
        output.Write("using System.Collections.Generic;");
        var ns = input.ReadLine();
        output.Write("namespace ");
        output.WriteLine(ns);
        output.WriteLine("{");
        while (!input.EndOfStream)
        {
            var cls = input.ReadLine().Split(':');
            output.WriteLine("    public partial class " + cls[0] + " : Calculated<" + cls[1] + ">");
            output.WriteLine("    {");
            output.WriteLine("        internal " + cls[0] + "(int id, ITableProvider owner) : base(id, owner) { }");
            var dummyList = new List<string>();
            while (true)
            {
                var line = input.ReadLine();
                if (string.IsNullOrWhiteSpace(line)) break;
                var prop = line.Split(' ');
                string propName = prop[1];
                string propType = prop[0];
                string fieldName = "_" + char.ToLowerInvariant(propName[0]) + propName.Substring(1);
                if (prop.Length >= 3 && prop[2] == "-")
                    dummyList.Add(propName);
                output.WriteLine();
                output.WriteLine("        private " + propType + " " + fieldName + ";");
                output.WriteLine("        public " + propType + " " + propName);
                output.WriteLine("        {");
                output.WriteLine("            get => " + fieldName + ";");
                output.WriteLine("            private set => Set(ref " + fieldName + ", value);");
                output.WriteLine("        }");
            }
            output.WriteLine();
            output.WriteLine("        public override void Update(" + cls[1] + " raw)");
            output.WriteLine("        {");
            foreach (string prop in dummyList)
                output.WriteLine("            " + prop + " = raw." + prop + ";");
            output.WriteLine("            UpdateCore(raw);");
            output.WriteLine("        }");
            output.WriteLine("        partial void UpdateCore(" + cls[1] + " raw);");
            output.WriteLine("    }");
        }
        output.WriteLine("}");
        output.Flush();
    }
}
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="UpdateScaffold" Inputs="$(MSBuildProjectFile);@(Scaffold)" Outputs="@(Scaffold->'%(RelativeDir)%(Filename).g.cs')" BeforeTargets="CoreCompile">
    <CalculatedScaffold Inputs="@(Scaffold)" />
  </Target>
</Project>
