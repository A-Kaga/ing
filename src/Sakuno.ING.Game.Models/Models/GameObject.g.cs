//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Sakuno.ING.Game.Models.MasterData;

namespace Sakuno.ING.Game.Models
{
    public partial class Equipment : Calculated<IRawEquipment>
    {
        public Equipment(int id, ITableProvider owner) : base(id, owner)
        {
            equipmentInfoTable = owner.GetTable<EquipmentInfo>();
            CreateDummy();
        }

        private readonly ITable<EquipmentInfo> equipmentInfoTable;

        private EquipmentInfo _info;
        public EquipmentInfo Info
        {
            get => _info;
            internal set => Set(ref _info, value);
        }

        private bool _isLocked;
        public bool IsLocked
        {
            get => _isLocked;
            internal set => Set(ref _isLocked, value);
        }

        private int _improvementLevel;
        public int ImprovementLevel
        {
            get => _improvementLevel;
            internal set => Set(ref _improvementLevel, value);
        }

        private int _airProficiency;
        public int AirProficiency
        {
            get => _airProficiency;
            internal set => Set(ref _airProficiency, value);
        }

        private bool _isAvailable;
        public bool IsAvailable
        {
            get => _isAvailable;
            internal set => Set(ref _isAvailable, value);
        }

        public override void Update(IRawEquipment raw)
        {
            IsLocked = raw.IsLocked;
            ImprovementLevel = raw.ImprovementLevel;
            AirProficiency = raw.AirProficiency;
            UpdateCore(raw);
        }
        partial void UpdateCore(IRawEquipment raw);
        partial void CreateDummy();
    }
    public partial class BuildingDock : Calculated<IRawBuildingDock>
    {
        public BuildingDock(int id, ITableProvider owner) : base(id, owner)
        {
            shipInfoTable = owner.GetTable<ShipInfo>();
            CreateDummy();
        }

        private readonly ITable<ShipInfo> shipInfoTable;

        private DateTimeOffset _completionTime;
        public DateTimeOffset CompletionTime
        {
            get => _completionTime;
            internal set => Set(ref _completionTime, value);
        }

        private BuildingDockState _state;
        public BuildingDockState State
        {
            get => _state;
            internal set => Set(ref _state, value);
        }

        private Materials _consumption;
        public Materials Consumption
        {
            get => _consumption;
            internal set => Set(ref _consumption, value);
        }

        private ShipInfo _builtShip;
        public ShipInfo BuiltShip
        {
            get => _builtShip;
            internal set => Set(ref _builtShip, value);
        }

        private bool _isLSC;
        public bool IsLSC
        {
            get => _isLSC;
            internal set => Set(ref _isLSC, value);
        }

        public override void Update(IRawBuildingDock raw)
        {
            CompletionTime = raw.CompletionTime;
            State = raw.State;
            Consumption = raw.Consumption;
            IsLSC = raw.IsLSC;
            UpdateCore(raw);
        }
        partial void UpdateCore(IRawBuildingDock raw);
        partial void CreateDummy();
    }
    public partial class RepairingDock : Calculated<IRawRepairingDock>
    {
        public RepairingDock(int id, ITableProvider owner) : base(id, owner)
        {
            shipTable = owner.GetTable<Ship>();
            CreateDummy();
        }

        private readonly ITable<Ship> shipTable;

        private RepairingDockState _state;
        public RepairingDockState State
        {
            get => _state;
            internal set => Set(ref _state, value);
        }

        private DateTimeOffset _completionTime;
        public DateTimeOffset CompletionTime
        {
            get => _completionTime;
            internal set => Set(ref _completionTime, value);
        }

        private Materials _consumption;
        public Materials Consumption
        {
            get => _consumption;
            internal set => Set(ref _consumption, value);
        }

        public override void Update(IRawRepairingDock raw)
        {
            State = raw.State;
            CompletionTime = raw.CompletionTime;
            Consumption = raw.Consumption;
            UpdateCore(raw);
        }
        partial void UpdateCore(IRawRepairingDock raw);
        partial void CreateDummy();
    }
    public partial class UseItemCount : Calculated<IRawUseItemCount>
    {
        public UseItemCount(int id, ITableProvider owner) : base(id, owner)
        {
            useItemInfoTable = owner.GetTable<UseItemInfo>();
            CreateDummy();
        }

        private readonly ITable<UseItemInfo> useItemInfoTable;

        private UseItemInfo _item;
        public UseItemInfo Item
        {
            get => _item;
            internal set => Set(ref _item, value);
        }

        private int _count;
        public int Count
        {
            get => _count;
            internal set => Set(ref _count, value);
        }

        public override void Update(IRawUseItemCount raw)
        {
            Count = raw.Count;
            UpdateCore(raw);
        }
        partial void UpdateCore(IRawUseItemCount raw);
        partial void CreateDummy();
    }
    public partial class Admiral : Calculated<IRawAdmiral>
    {
        public Admiral(int id, ITableProvider owner) : base(id, owner)
        {
            CreateDummy();
        }

        private string _name;
        public string Name
        {
            get => _name;
            internal set => Set(ref _name, value);
        }

        private Leveling _leveling;
        public Leveling Leveling
        {
            get => _leveling;
            internal set => Set(ref _leveling, value);
        }

        private AdmiralRank _rank;
        public AdmiralRank Rank
        {
            get => _rank;
            internal set => Set(ref _rank, value);
        }

        private string _comment;
        public string Comment
        {
            get => _comment;
            internal set => Set(ref _comment, value);
        }

        private int _maxShipCount;
        public int MaxShipCount
        {
            get => _maxShipCount;
            internal set => Set(ref _maxShipCount, value);
        }

        private int _maxEquipmentCount;
        public int MaxEquipmentCount
        {
            get => _maxEquipmentCount;
            internal set => Set(ref _maxEquipmentCount, value);
        }

        private BattleStat _battleStat;
        public BattleStat BattleStat
        {
            get => _battleStat;
            internal set => Set(ref _battleStat, value);
        }

        private BattleStat _practiceStat;
        public BattleStat PracticeStat
        {
            get => _practiceStat;
            internal set => Set(ref _practiceStat, value);
        }

        private ExpeditionStat _expeditionStat;
        public ExpeditionStat ExpeditionStat
        {
            get => _expeditionStat;
            internal set => Set(ref _expeditionStat, value);
        }

        private bool _canLSC;
        public bool CanLSC
        {
            get => _canLSC;
            internal set => Set(ref _canLSC, value);
        }

        private int _maxMaterial;
        public int MaxMaterial
        {
            get => _maxMaterial;
            internal set => Set(ref _maxMaterial, value);
        }

        public override void Update(IRawAdmiral raw)
        {
            Name = raw.Name;
            Leveling = raw.Leveling;
            Rank = raw.Rank;
            Comment = raw.Comment;
            MaxShipCount = raw.MaxShipCount;
            MaxEquipmentCount = raw.MaxEquipmentCount;
            BattleStat = raw.BattleStat;
            PracticeStat = raw.PracticeStat;
            ExpeditionStat = raw.ExpeditionStat;
            CanLSC = raw.CanLSC;
            MaxMaterial = raw.MaxMaterial;
            UpdateCore(raw);
        }
        partial void UpdateCore(IRawAdmiral raw);
        partial void CreateDummy();
    }
    public partial class Ship : Calculated<IRawShip>
    {
        public Ship(int id, ITableProvider owner) : base(id, owner)
        {
            shipInfoTable = owner.GetTable<ShipInfo>();
            equipmentTable = owner.GetTable<Equipment>();
            CreateDummy();
        }

        private readonly ITable<ShipInfo> shipInfoTable;

        private readonly ITable<Equipment> equipmentTable;

        private ShipInfo _info;
        public ShipInfo Info
        {
            get => _info;
            internal set => Set(ref _info, value);
        }

        private Leveling _leveling;
        public Leveling Leveling
        {
            get => _leveling;
            internal set => Set(ref _leveling, value);
        }

        private ClampedValue _hP;
        public ClampedValue HP
        {
            get => _hP;
            internal set => Set(ref _hP, value);
        }

        private ShipSpeed _speed;
        public ShipSpeed Speed
        {
            get => _speed;
            internal set => Set(ref _speed, value);
        }

        private FireRange _fireRange;
        public FireRange FireRange
        {
            get => _fireRange;
            internal set => Set(ref _fireRange, value);
        }

        private int _slotCount;
        public int SlotCount
        {
            get => _slotCount;
            internal set => Set(ref _slotCount, value);
        }

        private ClampedValue _fuel;
        public ClampedValue Fuel
        {
            get => _fuel;
            internal set => Set(ref _fuel, value);
        }

        private ClampedValue _bullet;
        public ClampedValue Bullet
        {
            get => _bullet;
            internal set => Set(ref _bullet, value);
        }

        private TimeSpan _repairingTime;
        public TimeSpan RepairingTime
        {
            get => _repairingTime;
            internal set => Set(ref _repairingTime, value);
        }

        private Materials _repairingCost;
        public Materials RepairingCost
        {
            get => _repairingCost;
            internal set => Set(ref _repairingCost, value);
        }

        private int _morale;
        public int Morale
        {
            get => _morale;
            internal set => Set(ref _morale, value);
        }

        private ShipMordenizationStatus _firepower;
        public ShipMordenizationStatus Firepower
        {
            get => _firepower;
            internal set => Set(ref _firepower, value);
        }

        private ShipMordenizationStatus _torpedo;
        public ShipMordenizationStatus Torpedo
        {
            get => _torpedo;
            internal set => Set(ref _torpedo, value);
        }

        private ShipMordenizationStatus _antiAir;
        public ShipMordenizationStatus AntiAir
        {
            get => _antiAir;
            internal set => Set(ref _antiAir, value);
        }

        private ShipMordenizationStatus _armor;
        public ShipMordenizationStatus Armor
        {
            get => _armor;
            internal set => Set(ref _armor, value);
        }

        private ShipMordenizationStatus _evasion;
        public ShipMordenizationStatus Evasion
        {
            get => _evasion;
            internal set => Set(ref _evasion, value);
        }

        private ShipMordenizationStatus _antiSubmarine;
        public ShipMordenizationStatus AntiSubmarine
        {
            get => _antiSubmarine;
            internal set => Set(ref _antiSubmarine, value);
        }

        private ShipMordenizationStatus _lightOfSight;
        public ShipMordenizationStatus LightOfSight
        {
            get => _lightOfSight;
            internal set => Set(ref _lightOfSight, value);
        }

        private ShipMordenizationStatus _luck;
        public ShipMordenizationStatus Luck
        {
            get => _luck;
            internal set => Set(ref _luck, value);
        }

        private bool _isLocked;
        public bool IsLocked
        {
            get => _isLocked;
            internal set => Set(ref _isLocked, value);
        }

        private int? _shipLockingTag;
        public int? ShipLockingTag
        {
            get => _shipLockingTag;
            internal set => Set(ref _shipLockingTag, value);
        }

        private bool _isRepairing;
        public bool IsRepairing
        {
            get => _isRepairing;
            internal set => Set(ref _isRepairing, value);
        }

        public override void Update(IRawShip raw)
        {
            Leveling = raw.Leveling;
            HP = raw.HP;
            Speed = raw.Speed;
            FireRange = raw.FireRange;
            RepairingTime = raw.RepairingTime;
            RepairingCost = raw.RepairingCost;
            Morale = raw.Morale;
            IsLocked = raw.IsLocked;
            ShipLockingTag = raw.ShipLockingTag;
            UpdateCore(raw);
        }
        partial void UpdateCore(IRawShip raw);
        partial void CreateDummy();
    }
    public partial class Fleet : Calculated<IRawFleet>
    {
        public Fleet(int id, ITableProvider owner) : base(id, owner)
        {
            shipTable = owner.GetTable<Ship>();
            expeditionInfoTable = owner.GetTable<ExpeditionInfo>();
            CreateDummy();
        }

        private readonly ITable<Ship> shipTable;

        private readonly ITable<ExpeditionInfo> expeditionInfoTable;

        private string _name;
        public string Name
        {
            get => _name;
            internal set => Set(ref _name, value);
        }

        private FleetExpeditionState _expeditionState;
        public FleetExpeditionState ExpeditionState
        {
            get => _expeditionState;
            internal set => Set(ref _expeditionState, value);
        }

        private ExpeditionInfo _expedition;
        public ExpeditionInfo Expedition
        {
            get => _expedition;
            internal set => Set(ref _expedition, value);
        }

        private DateTimeOffset _expeditionCompletionTime;
        public DateTimeOffset ExpeditionCompletionTime
        {
            get => _expeditionCompletionTime;
            internal set => Set(ref _expeditionCompletionTime, value);
        }

        public override void Update(IRawFleet raw)
        {
            Name = raw.Name;
            ExpeditionState = raw.ExpeditionState;
            ExpeditionCompletionTime = raw.ExpeditionCompletionTime;
            UpdateCore(raw);
        }
        partial void UpdateCore(IRawFleet raw);
        partial void CreateDummy();

        private readonly BindableSnapshotCollection<Ship> ships = new BindableSnapshotCollection<Ship>();
        public IBindableCollection<Ship> Ships => ships;
    }
    public partial class Quest : Calculated<IRawQuest>
    {
        public Quest(int id, ITableProvider owner) : base(id, owner)
        {
            NameTranslation = Module.Localize.GetLocalized("QuestName", id.ToString());
            DescriptionTranslation = Module.Localize.GetLocalized("QuestDesc", id.ToString());
            CreateDummy();
        }

        public string NameTranslation { get; }

        public string DescriptionTranslation { get; }

        private QuestCategoty _category;
        public QuestCategoty Category
        {
            get => _category;
            internal set => Set(ref _category, value);
        }

        private QuestFilter _period;
        public QuestFilter Period
        {
            get => _period;
            internal set => Set(ref _period, value);
        }

        private QuestState _state;
        public QuestState State
        {
            get => _state;
            internal set => Set(ref _state, value);
        }

        private QuestProgress _progress;
        public QuestProgress Progress
        {
            get => _progress;
            internal set => Set(ref _progress, value);
        }

        private Materials _rewards;
        public Materials Rewards
        {
            get => _rewards;
            internal set => Set(ref _rewards, value);
        }

        private string _name;
        public string Name
        {
            get => _name;
            internal set => Set(ref _name, value);
        }

        private string _description;
        public string Description
        {
            get => _description;
            internal set => Set(ref _description, value);
        }

        public override void Update(IRawQuest raw)
        {
            Category = raw.Category;
            Period = raw.Period;
            State = raw.State;
            Progress = raw.Progress;
            Rewards = raw.Rewards;
            Name = raw.Name;
            Description = raw.Description;
            UpdateCore(raw);
        }
        partial void UpdateCore(IRawQuest raw);
        partial void CreateDummy();
    }
}
